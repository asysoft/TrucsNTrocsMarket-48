@model BeYourMarket.Web.Models.ProShopModel


@section Styles {
    <link href="~/Content/bootstrap-fileinput/css/fileinput.min.css" rel="stylesheet" />
    <link href="~/Content/jsTree/themes/default/style.min.css" rel="stylesheet" />
}

<div class="card">
    @using (Html.BeginForm("ProIdentityUpdate", "Professional", FormMethod.Post, new { role = "form", id = "form0", enctype = "multipart/form-data" }))
    {
        @*<form action="@Url.Action("ProIdentityUpdate", "Professional")" id="proUpdateForm" method="post" role="form" enctype="multipart/form-data">*@

        @Html.AntiForgeryToken()
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        <div class="card-header">
            [[[Company Infos]]]
            @*<a class="btn btn-success btn-sm pull-right" href="@Url.Action("ProIdentityUpdate", "Professional")">[[[Validate]]]</a>*@
            <button class="btn btn-primary  btn-sm pull-right" type="submit"><i class="fa fa-save"></i> [[[Validate]]]</button>

        </div>
        <div class="card-body">
            <div class="row">
                @*<div class="text-center">
                        <img class="rounded" alt="Cinque Terre" style="width: 100%" src="@Model.Pictures.First().Url" />
                        <div class="target">
                            <input type="file" id="files" name="files" class="file-loading">
                        </div>
                    </div>*@
                <div class="form-group text-center">
                    <div class="target" style="width:200px; height: 200px">
                        @*<input type="file" id="files" name="files" class="file-loading" data-preview-file-type="any">*@
                        <input id="Logo" name="Logo" type="file" class="form-control file-loading">
                    </div>
                </div>
            </div>

            <hr />
            <fieldset>
                <div class="form-group">
                    <label>[[[Company name]]]</label>
                    @Html.TextBoxFor(m => m.UserPro.ProCompany, new { @class = "form-control" })
                </div>

                <div class="form-group">
                    <label>[[[Siret Number]]] : </label>
                    @Html.TextBoxFor(m => m.UserPro.ProSiret, new { @class = "form-control" })
                </div>
            </fieldset>
            <fieldset>
                <div class="form-group">
                    <label for="ProAdress">[[[Adress]]]</label>
                    @Html.TextBoxFor(m => m.UserPro.ProAdress, new { @class = "form-control" })
                </div>
                <div class="form-group">
                    <label for="ProTownZip">[[[City]]]</label>
                    @Html.TextBoxFor(m => m.UserPro.ProTownZip, new { @class = "form-control" })
                </div>
                <div class="form-group">
                    <label for="ProPhone">[[[Company Phone]]] : </label>
                    @Html.TextBoxFor(m => m.UserPro.ProPhone, new { @class = "form-control" })
                </div>
                <div class="form-group">
                    <label for="Email">[[[Company Email]]] : </label>
                    @Html.TextBoxFor(m => m.UserPro.Email, new { @class = "form-control" })
                </div>
                <div class="form-group">
                    <label for="ProSiteWeb">[[[Web Site]]]</label>
                    @Html.TextBoxFor(m => m.UserPro.ProSiteWeb, new { @class = "form-control" })
                </div>
            </fieldset>
            <hr />

            <fieldset>
                <legend>[[[Company Contact]]]</legend>
                <div class="form-group text-center">
                    <label class="cr-styled">
                        <input type="radio" name="Gender" enabled="false" id="GenderUpd" value="M" @(Model.UserPro.Gender == "M" ? "checked" : "") @(Model.UserPro.Gender == "F" ? "disabled" : "") />
                        @Html.RadioButtonFor(m => m.UserPro.Gender, Model.UserPro.Gender, new { id = "M" })
                        <i class="fa"></i> [[[Male]]]
                    </label> <i class="fa fa-male"></i>
                    <label class="cr-styled">
                        <input type="radio" name="Gender" enabled="false" id="GenderUpd" value="F" @(Model.UserPro.Gender == "F" ? "checked" : "") @(Model.UserPro.Gender == "M" ? "disabled" : "") /> <i class="fa"></i> [[[Female]]]
                    </label> <i class="fa fa-female"></i>
                </div>

                <div class="form-group">
                    <label class="" for="FirstName">[[[First Name]]] : </label>
                    @Html.TextBoxFor(m => m.UserPro.FirstName, new { @class = "form-control" })
                </div>
                <div class="form-group">
                    <label class="" for="LastName">[[[Last Name]]] : </label>
                    @Html.TextBoxFor(m => m.UserPro.LastName, new { @class = "form-control" })
                </div>
                <div class="form-group">
                    <label class="" for="PhoneNumber">[[[Phone Number]]] : </label>
                    @Html.TextBoxFor(m => m.UserPro.PhoneNumber, new { @class = "form-control" })
                </div>
            </fieldset>
            <hr />

            @*<div class="form-group" style="border-style:groove;overflow-y: auto; height:240px">
                    <div id="jstreeCategUpd">  </div>
                    <input type="hidden" id="CategoryIDhiddUpd" name="ProCategoryIDs" value="ProCategoryIDs" />
                </div>*@

        </div>

        <div class="card-footer">
        </div>
    }
</div>


<!-- ./ Main Content -->
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")

    <script src="~/Scripts/fileinput.min.js"></script>
    @Html.Partial("_LocalizationFileInput")
    <script src="~/js/colorpicker/js/bootstrap-colorpicker.min.js"></script>

    <script>
        var $input = $("#files");

        $input.fileinput({
            uploadAsync: false,
            showCaption: false,
            showRemove: false,
            showUpload: false,
            maxFileCount: 1,
            overwriteInitial: true,
            initialPreview: [
                    '<img src="@Model.Pictures.First().Url" class="file-preview-image">'
            ],
            initialPreviewConfig: [
                    { url: "@Url.Action("PictureDelete", "Professional", new { })", key: "logo" }
            ],
            maxFileSize: 10000,
            browseClass: "btn btn-default",
            allowedFileTypes: ["image"],
            language: '@Context.GetPrincipalAppLanguageForRequest().ToString()'
        });
        @*@{
            var preview = new System.Text.StringBuilder();
            var previewDelete = new System.Text.StringBuilder();

            if(Model != null &&  Model.Pictures != null)
            {

                preview.AppendFormat(@"'<img src=""{0}"" class=""file-preview-image"">',", Model.Pictures.First().Url);
                previewDelete.AppendFormat(@"{{url: '{0}',key: {1} }},", Url.Action("deleteProLogo", "Professional", new { id = Model.Pictures.First().ID }), Model.Pictures.First().ID);
            }
        }

        var $input = $("#files");

        $input.fileinput({
            uploadAsync: true,   // ??? a voir tout en ync ou en async avec false
            showCaption: false,
            showRemove: false,
            showUpload: false,
            maxImageWidth: 200,
            maxImageHeight: 200,
            resizeImage: true,
            resizePreference: 'width',

            maxFileCount: 5,
            overwriteInitial: false,
            initialPreview: [
                    @Html.Raw(preview.ToString())
            ],
            initialPreviewConfig: [
                @Html.Raw(previewDelete.ToString())
            ],
            initialPreviewConfig: [
                @Html.Raw(previewDelete.ToString())
            ],
            maxFileSize: 10000,
            browseClass: "btn btn-primary",
            allowedFileTypes: ["image"],
            language: '@Context.GetPrincipalAppLanguageForRequest().ToString()'
        });*@
        @*$(document).ready(function () {

         @{
             var preview = new System.Text.StringBuilder();
             var previewDelete = new System.Text.StringBuilder();

             foreach (var picture in Model.Pictures)
             {
                 preview.AppendFormat(@"'<img src=""{0}"" class=""file-preview-image"">',", picture.Url);
                 previewDelete.AppendFormat(@"{{url: '{0}',key: {1} }},", Url.Action("ListingProLogoDelete", "Professional", new { id = picture.ID }), picture.ID);

             }

        }

        var $input = $("#files");

        $input.fileinput({
            uploadAsync: false,
            showCaption: false,
            showRemove: false,
            showUpload: false,
            maxFileCount: 5,
            overwriteInitial: false,
            initialPreview: [
                    @Html.Raw(preview.ToString())
            ],
            initialPreviewConfig: [
                @Html.Raw(previewDelete.ToString())
            ],

            maxFileSize: 10000,
            browseClass: "btn btn-primary btn-sm",
            allowedFileTypes: ["image"],
            language: '@Context.GetPrincipalAppLanguageForRequest().ToString()'
            });

        })*@


         //$(function () {
         //   const reader = new FileReader();
         //   const fileInput = document.getElementById("file");
         //   const img = document.getElementById("img");
         //   reader.onload = e => {
         //       img.src = e.target.result;
         //    }

         //   fileInput.addEventListener('change', e => {
         //       const f = e.target.files[0];
         //       reader.readAsDataURL(f);
         //    })

         //})

        //$(document).ready(function () {

        //    $("#file").on('change', function () {
        //        alert('change' + this.files[0].name);
        //    });

        //    $('#file').on('click', function () {
        //        alert('click' + this.files[0].name);
        //    });
        //})

        //$(document).on("change", "#file", function () {
        //    alert("hhhhhhhh");
        //})

    </script>
    <script>
        $(function () {

            var CategID;
            $('#jstreeCategUpd').jstree({
                'core': {
                    "multiple": false,
                    "check_callback": false,
                    'data': {
                        'url': '/jsTree3/GetJsTree3CategData/',
                        "data": function (node) { return { id: CategID }; },
                        'dataType': 'json',
                    },
                    "themes": {
                        "responsive": true,
                        "variant": 'larg',
                        "stripes": false,
                        "icons": false,
                        "ellipsis": false,
                        "dots": false
                    },
                    "checkbox": {
                        "visible": true,
                        "two_state": false
                    }
                },
                "plugins": ["checkbox"]
            });

            $('#jstreeCategUpd').on("changed.jstree", function (e, data) {
                if (data != null && data.selected != null && data.selected.length > 0) {
                    document.getElementById('CategoryIDhiddUpd').value = data.selected.join(";");
                }
                else
                    document.getElementById('CategoryIDhiddUpd').value = null;
            });

        });

    </script>
}
