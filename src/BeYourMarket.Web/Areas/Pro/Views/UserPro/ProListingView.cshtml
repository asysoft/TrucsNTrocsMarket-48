
@model BeYourMarket.Web.Models.ProListingViewModel

@using PagedList.Mvc

@using BeYourMarket.Web.Utilities
@using BeYourMarket.Service
@using Microsoft.AspNet.Identity
@using BeYourMarket.Web.Extensions  ;


@{
    /**/

    ViewBag.Title = "Pro Shop";
}


@section Styles {

    <link href="~/Content/bootstrap-fileinput/css/fileinput.min.css" rel="stylesheet" />
    <link href="~/Content/jsTree/themes/default/style.min.css" rel="stylesheet" />
}

<div class="container-fluid" style="background-color:#EAF4D3">
        <div class="row" style="background-color:#EAF4D3" >
            <div class="col-md-7">
                <div class="card">
                    <div class="container-fluid">
                        <div class="row">
                            @Html.Partial("_UserMessage")

                            <div class="col-md-12">
                                <div class="section card-header">
                                    <div class="col-md-12">
                                        <h3>
                                            @Model.ListingItem.ListingCurrent.Title
                                            <span class="score @Model.ListingItem.ListingCurrent.RatingClass text-md"></span>
                                            <!-- Show edit button if administrator or the user who create the listing -->
                                            @if (Model.ListingItem.ListingCurrent.UserID == User.Identity.GetUserId() || User.IsInRole("Administrator"))
                                            {
                                                <a class="btn btn-primary" href="@Url.Action("ProListingUpdate", "UserPro", new { id = Model.ListingItem.ListingCurrent.ID, area = "Pro" })"><i class="fa fa-edit"></i> [[[Edit]]]</a>
                                            }
                                        </h3>

                                        @if (Model.ListingItem.ListingCurrent.Price.HasValue)
                                        {
                                            <h4>
                                                @Html.DisplayFor(x => x.ListingItem.ListingCurrent.PriceFormatted) @Model.ListingItem.ListingCurrent.ListingType.PriceUnitLabel
                                            </h4>
                                        }
                                        <p class="lead text-lighten">
                                            @Model.ListingItem.ListingCurrent.LocationRef.Name - @Model.ListingItem.ListingCurrent.LocationRef.Description - @Model.ListingItem.ListingCurrent.Location
                                        </p>
                                    </div>
                                </div>
                                <div class="card-header bdr-b container-fluid">
                                    <ul class="nav nav-tabs" id="mainTab">
                                        <li class="nav-item">
                                        <a class="nav-link active" href="#description" aria-controls="description" data-toggle="tab"><i class="fa fa-info"></i>[[[Description]]]</a>
                                        </li>
                                        @if (Model.ListingItem.ListingCurrent.Latitude.HasValue && Model.ListingItem.ListingCurrent.Longitude.HasValue)
                                        {
                                            <li  class="nav-item">
                                                <a class="nav-link" data-toggle="tab" href="#map-canvas"><i class="fa fa-map-marker"></i>[[[Maps]]]</a></li>
                                        }

                                        <li  class="nav-item" >
                                            <a class="nav-link" data-toggle="tab" href="#reviewList"><i class="fa fa-star"></i>[[[Reviews]]]</a>
                                        </li>

                                        <li  class="nav-item" >
                                            <a class="nav-link" id="contactModal" data-toggle="modal" data-target="#contactModal"><i class="fa fa-envelope"></i>[[[Contact]]]</a>
                                        </li>
                                    </ul>
                                </div>

                                <div class="tab-content">
                                    <div class="tab-pane active container" id="description">
                                        <div class="card bdr-t-none">
                                            <div class="panel-body">
                                                <p>
                                                    @Model.ListingItem.ListingCurrent.Description
                                                </p>
                                            </div>

                                            <!---Pictures-->
                                            <div class="card-header bdr-t">
                                                <i class="fa fa-picture-o"></i> [[[Pictures]]]
                                            </div>
                                            <div class="card-block">
                                                @if (Model.ListingItem.Pictures.Count > 0)
                                                {
                                                    <div id="carousel-gallery" class="carousel slide" data-ride="carousel">
                                                        <ol class="carousel-indicators">
                                                            @for (int i = 0; i < Model.ListingItem.Pictures.Count; i++)
                                                            {
                                                                <li data-target="#carousel-gallery" data-slide-to="@i"></li>
                                                            }
                                                        </ol>

                                                        <div class="carousel-inner" role="listbox">
                                                            @for (int i = 0; i < Model.ListingItem.Pictures.Count; i++)
                                                            {
                                                                <div class="item @(i == 0 ? "active" : "")">
                                                                    <img style=" margin-left: auto; margin-right: auto;" alt="" src="@Model.ListingItem.Pictures[i].Url" data-holder-rendered="true">
                                                                </div>
                                                            }
                                                        </div>

                                                        <a class="left carousel-control" href="#carousel-gallery" role="button" data-slide="prev">
                                                            <span class="glyphicon glyphicon-chevron-left" aria-hidden="true"></span>
                                                            <span class="sr-only">[[[Previous]]]</span>
                                                        </a>
                                                        <a class="right carousel-control" href="#carousel-gallery" role="button" data-slide="next">
                                                            <span class="glyphicon glyphicon-chevron-right" aria-hidden="true"></span>
                                                            <span class="sr-only">[[[Next]]]</span>
                                                        </a>

                                                    </div>

                                                    <div class="panel-body">
                                                        <div class="row">
                                                            @foreach (var thumbnail in Model.ListingItem.Pictures)
                                                            {
                                                                <div class="col-xs-6 col-md-2">
                                                                    <a href="@thumbnail.Url" class="boxer" title="" data-gallery="gallery" data-lightbox-gallery="photo_gallery">
                                                                        <img alt="Thumbnail" src="@thumbnail.Url" style=" width: 100%; display: block;">
                                                                    </a>
                                                                </div>
                                                            }
                                                        </div>

                                                    </div>
                                                }
                                                else
                                                {
                                                    <img style="width: 100%" src="@BeYourMarket.Web.Utilities.ImageHelper.GetListingImagePath(0)" />
                                                }
                                            </div>
                                            <!---Pictures-->

                                            <table class="table">
                                                <tbody>
                                                    <tr>
                                                        <td>
                                                            [[[Category]]]
                                                        </td>
                                                        <td>
                                                            <a href="@Url.Action("Search", "Home", new { categoryId = Model.ListingItem.ListingCurrent.CategoryID })">@Model.ListingItem.ListingCurrent.Category.Name</a>
                                                        </td>
                                                    </tr>
                                                    @if (Model.ListingItem.ListingCurrent.Price.HasValue)
                                                    {
                                                        <tr>
                                                            <td>
                                                                [[[Price]]]
                                                            </td>
                                                            <td>
                                                                @Html.DisplayFor(x => Model.ListingItem.ListingCurrent.PriceFormatted)
                                                            </td>
                                                        </tr>
                                                    }
                                                    <tr>
                                                        <td>
                                                            [[[Listing Type]]]
                                                        </td>
                                                        <td>
                                                            @Model.ListingItem.ListingCurrent.ListingType.Name
                                                        </td>
                                                    </tr>
                                                    <tr>
                                                        <td>
                                                            [[[Localization]]]
                                                        </td>
                                                        <td>
                                                            @Model.ListingItem.ListingCurrent.LocationRef.Name - @Model.ListingItem.ListingCurrent.LocationRef.Description
                                                        </td>
                                                    </tr>
                                                    <tr>
                                                    <tr>
                                                        <td>
                                                            [[[Location detail]]]
                                                        </td>
                                                        <td>
                                                            @Html.DisplayFor(x => Model.ListingItem.ListingCurrent.Location)
                                                        </td>
                                                    </tr>
                                                    <tr>
                                                        <td>
                                                            [[[Date Posted]]]
                                                        </td>
                                                        <td>
                                                            @Model.ListingItem.ListingCurrent.Created.ToShortDateString()
                                                        </td>
                                                    </tr>
                                                    <tr>
                                                        <td>
                                                            [[[Views]]]
                                                        </td>
                                                        <td>
                                                            @Model.ListingItem.ListingCurrent.ListingStats.FirstOrDefault().CountView
                                                        </td>
                                                    </tr>

                                                    @foreach (var item in Model.ListingItem.ListingCurrent.ListingMetas)
                                                    {
                                                        <tr>
                                                            <td>
                                                                @item.MetaField.Name
                                                            </td>
                                                            <td>
                                                                @item.Value
                                                            </td>
                                                        </tr>
                                                    }
                                                </tbody>
                                            </table>

                                        </div>
                                    </div>

                                    <div class="tab-pane container" id="map-canvas">
                                        @if (Model.ListingItem.ListingCurrent.Latitude.HasValue && Model.ListingItem.ListingCurrent.Longitude.HasValue)
                                        {
                                            <div class="panel-heading bdr-t">
                                                <i class="fa fa-map-marker"></i> [[[Map]]]
                                            </div>
                                            <div class="panel-body">
                                                <div id="map-canvas"></div>
                                            </div>
                                        }
                                    </div>
                                    <div class="tab-pane container" id="contact">
                                        <div class="panel panel-default bdr-t-none">
                                            @if (Model.ListingItem.ListingCurrent.ShowPhone && !string.IsNullOrEmpty(Model.ListingItem.ListingCurrent.ContactPhone))
                                            {
                                                <div class="list-group">
                                                    <a data-text-swap="[[[Contact number (Click to show)]]]" data-text-original="@Model.ListingItem.ListingCurrent.ContactPhone" class="text-swap list-group-item "><i class="mdi-hardware-phone-iphone"></i> [[[Contact number (Click to show)]]]</a>
                                                    <a href="@Url.Action("Profile", "Listing", new { id = Model.ListingItem.ListingCurrent.UserID })" class="list-group-item"><i class="mdi-action-view-module"></i>[[[View User's other listings]]]</a>
                                                </div>
                                            }

                                            <div class="panel-heading">
                                                <span>[[[Contact]]] @Model.ListingItem.User.FullName</span>
                                            </div>

                                            <a id="contactModal" data-toggle="modal" data-target="#contactModal"><i class="fa fa-envelope"></i>[[[Contact]]]</a>
                                        </div>
                                    </div>
                                </div>

                                @Html.Partial("~/Views/Listing/_ListingReview.cshtml", Model.ListingItem.ListingCurrent.ListingReviews)

                                @Html.Partial("~/Views/Listing/_ListingReviewModal.cshtml", Model.ListingItem)

                                <!-- Listing Hook -->
                                @*@Html.DoAction(HookName.Listing, Model.ListingItem.ListingCurrent.ListingItem.ListingCurrent.ID)*@
                            </div>

                            <div>
                                <div class="col-md-4 col-xs-12">
                                    <div id="sidebar" data-spy="affix" data-offset-top="120" class="affix text-center">
                                        @*@Html.Partial("_ListingPayment", Model.ListingItem)*@

                                        <div class="panel panel-default panel-body mrg-t text-center">
                                            <a href="@Url.Action("Profile", "Listing", new { id = Model.ListingItem.User.Id })">
                                                <img class="img-circle profile-picture" src="@BeYourMarket.Web.Utilities.ImageHelper.GetUserProfileImagePath(Model.ListingItem.User.Id)" />
                                            </a>
                                            <h5>@Model.ListingItem.User.FullName</h5>
                                            <p class="text-lighten">
                                                [[[Joined since]]] @Model.ListingItem.User.RegisterDate.ToShortDateString()
                                            </p>
                                            <a href="@Url.Action("Profile", "Listing", new { id = Model.ListingItem.User.Id })">
                                                [[[View user's profile and other listings]]]<div>
                                                    <span class="score @Model.ListingItem.User.RatingClass"></span>
                                                    <span>@string.Format("[[[{0:N0} reviews]]]", Model.ListingItem.ListingCurrent.ListingReviews.Count)</span>
                                                </div>
                                            </a>

                                            <a id="contactModal" data-toggle="modal" data-target="#contactModal" class="btn btn-default btn-block">[[[Contact]]]</a>
                                        </div>

                                        <!-- AddToAny BEGIN -->
                                        <div class="a2a_kit a2a_kit_size_32 a2a_default_style">
                                            <span class="pull-left m-r-5"><i class="fa fa-share-alt"></i> [[[Share]]]</span>
                                            <a href="https://www.addtoany.com/share_save"></a>
                                            <a class="a2a_button_facebook"></a>
                                            <a class="a2a_button_twitter"></a>
                                            <a class="a2a_button_google_plus"></a>
                                            <a class="a2a_button_linkedin"></a>
                                        </div>

                                        @*<script type="text/javascript" src="//static.addtoany.com/menu/page.js"></script>*@
                                    </div>
                                </div>
                            </div>

                        </div>

                    </div>
                </div>
            </div>
            <div class="col-md-5 ">
                <div class="row">
                    <div class="col-md-12">
                        <div class="font-weight-bold text-warning">
                            <h4>
                                <i class="font-weight-bold text-warning fa fa-shopping-cart">  [[[Articles also available in Shop]]]</i>
                            </h4>
                        </div>

                    </div>
                </div>
                <div class="row">
                    <div class="form-inline pull-right">
                        <div class="form-group">
                            <div class="btn-group" role="group" aria-label="Sort View">
                                <a class="btn btn-primary" href="@Request.UrlReplace("SortView", BeYourMarket.Model.Enum.Enum_SortView.Grid.ToString())"><i class="fa fa-th"></i> [[[Grid]]]</a>
                                <a class="btn btn-primary" href="@Request.UrlReplace("SortView", BeYourMarket.Model.Enum.Enum_SortView.List.ToString())"><i class="fa fa-th-list"></i> [[[List]]]</a>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="row m-b-10">

                    @switch (Model.ListingsSearch.SortView)
                    {
                        case BeYourMarket.Model.Enum.Enum_SortView.Grid:
                        default:

                            @Html.Partial("~/Views/Listing/_ListingGrid.cshtml", Model.ListingsSearch)
                            break;

                        case BeYourMarket.Model.Enum.Enum_SortView.List:
                            @Html.Partial("~/Views/Listing/_ListingGridList.cshtml", Model.ListingsSearch)
                            break;
                        case BeYourMarket.Model.Enum.Enum_SortView.Map:
                            break;

                    }

                    <div class="card-header bdr-b">
                        <div class="container-fluid">
                            <div class=" col-md-12">
                                <h5 class="pull-left mrg-t">
                                    @string.Format("[[[Page {0} of {1}]]]", Model.ListingsSearch.ListingsPageList.PageCount < Model.ListingsSearch.PageNumber ? 0 : Model.ListingsSearch.PageNumber, Model.ListingsSearch.ListingsPageList.PageCount)
                                </h5>
                                @Html.PagedListPager(Model.ListingsSearch.ListingsPageList, (page) => { return Request.UrlReplace("PageNumber", page.ToString()); },
                                new PagedListRenderOptions
                                        {
                                            ContainerDivClasses = new List<string>(new string[] { "pull-right" }),
                                            DisplayPageCountAndCurrentLocation = false,
                                            MaximumPageNumbersToDisplay = 5,
                                            DisplayEllipsesWhenNotShowingAllPageNumbers = false
                                        })
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
</div>
<!-- ./ Main Content -->


@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <!-- Include Roller JS -->
    <script src="~/js/formstone/core.js"></script>
    <script src="~/js/formstone/touch.js"></script>
    <script src="~/js/formstone/transition.js"></script>
    <script src="~/js/formstone/lightbox.js"></script>

    <script>
        $(".text-swap").on("click", function () {
            var el = $(this);
            el.text() == el.data("text-swap")
                ? el.text(el.data("text-original"))
                : el.text(el.data("text-swap"));
        });
    </script>

    <script type="text/javascript">
        $(".boxer").lightbox({
            mobile: true
        });
    </script>

    @if (Model.ListingItem.ListingCurrent.Latitude.HasValue && Model.ListingItem.ListingCurrent.Longitude.HasValue)
    {
        <text>
            <script type="text/javascript">
                function initMap() {
                    var myLatlng = new google.maps.LatLng(@Model.ListingItem.ListingCurrent.Latitude.Value.ToString(System.Globalization.CultureInfo.InvariantCulture), @Model.ListingItem.ListingCurrent.Longitude.Value.ToString(System.Globalization.CultureInfo.InvariantCulture));
                    var isDraggable = $(document).width() > 480 ? true : false; // If document (your website) is wider than 480px, isDraggable = true, else isDraggable = false

                    var mapOptions = {
                        draggable: isDraggable,
                        scrollwheel: false, // Prevent users to start zooming the map when scrolling down the page
                        zoom: 14,
                        center: myLatlng
                    };

                    var map = new google.maps.Map(document.getElementById('map-canvas'), mapOptions);

                    var marker = new google.maps.Marker({
                        position: myLatlng,
                        map: map,
                        content: '@Model.ListingItem.ListingCurrent.Location'
                    });
                }
            </script>
        </text>
    }

    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCgB8z009mHSrPLaJUobfgmI1gTlk1aqyc&libraries=places&callback=initMap" async defer></script>
    <script type="text/javascript">
        $(document).ready(function () {
            $('a[data-toggle="tab"]').on('show.bs.tab', function (e) {
                localStorage.setItem('activeTab', $(e.target).attr('href'));
            });
            var activeTab = localStorage.getItem('activeTab');
            if (activeTab) {
                $('#mainTab a[href="' + activeTab + '"]').tab('show');
            }
        });
    </script>


    @*<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCgB8z009mHSrPLaJUobfgmI1gTlk1aqyc&libraries=places&callback=initMap" async defer></script>*@

    @*<script>
            //https://developers.google.com/maps/documentation/javascript/examples/places-autocomplete
            //https://developers.google.com/maps/documentation/javascript/examples/geocoding-reverse
            function initMap() {
                var isDraggable = $(document).width() > 480 ? true : false; // If document (your website) is wider than 480px, isDraggable = true, else isDraggable = false

                var mapOptions = {
                    draggable: isDraggable,
                    scrollwheel: false, // Prevent users to start zooming the map when scrolling down the page
                    zoom: 13,
                    center: new google.maps.LatLng(-20.1608912, 57.50122220000003),
                };

                @{ var hasLatLng = @Model.ListingItem.ListingCurrent.Latitude.HasValue && @Model.ListingItem.ListingCurrent.Longitude.HasValue; }
                var hasLatLng = @hasLatLng.ToString().ToLowerInvariant();

                @if (hasLatLng){
                    <text>
                mapOptions = {
                    center: new google.maps.LatLng(@Model.ListingItem.ListingCurrent.Latitude.Value.ToString(System.Globalization.CultureInfo.InvariantCulture), @Model.ListingItem.ListingCurrent.Longitude.Value.ToString(System.Globalization.CultureInfo.InvariantCulture)),
                    zoom: 12
                };
                </text>
                };

                var map = new google.maps.Map(document.getElementById('map-canvas'),  mapOptions);

                @if (hasLatLng){
                    <text>
                var marker = new google.maps.Marker({
                    position: new google.maps.LatLng(@Model.ListingItem.ListingCurrent.Latitude.Value.ToString(System.Globalization.CultureInfo.InvariantCulture), @Model.ListingItem.ListingCurrent.Longitude.Value.ToString(System.Globalization.CultureInfo.InvariantCulture)),
                    map: map
                });

                marker.setVisible(true);
                </text>
                }

                geocoder = new google.maps.Geocoder();

                var input = (document.getElementById('LocSelectedName'));

                // Try HTML5 geolocation
                if (@Model.ListingItem.ListingCurrent.ID == 0){
                    if (navigator.geolocation) {
                        navigator.geolocation.getCurrentPosition(function (position) {
                            var pos = new google.maps.LatLng(position.coords.latitude,
                                                             position.coords.longitude);

                            geocoder.geocode({ 'latLng': pos }, function (results, status) {
                                if (status == google.maps.GeocoderStatus.OK) {
                                    if (results[1]) {
                                        map.setZoom(14);
                                        map.setCenter(pos);

                                        marker = new google.maps.Marker({
                                            position: pos,
                                            map: map,
                                            content: results[1].formatted_address
                                        });
                                        infowindow.setContent(results[1].formatted_address);
                                        infowindow.open(map, marker);

                                        $('#LocSelectedName').val(results[1].formatted_address);

                                        alert(results[1].formatted_address);

                                        $('#Latitude').val(pos.lat());
                                        $('#Longitude').val(pos.lng());

                                    } else {
                                        alert('No results found');
                                    }
                                } else {
                                    alert('Geocoder failed due to: ' + status);
                                }
                            });
                        }, function () {
                            handleNoGeolocation(true);
                        });
                    } else {
                        // Browser doesn't support Geolocation
                        handleNoGeolocation(false);
                    }
                }

                var options = {
                    types: ['(cities)'],
                    componentRestrictions: { country: 'mu' }
                };
                var autocomplete = new google.maps.places.Autocomplete(input);
                autocomplete.bindTo('bounds', map);

                // ASY : Set the data fields to return when the user selects a place.
                autocomplete.setFields(  ['address_components', 'geometry', 'icon', 'name']);

                // ASY : try
                //var service = new google.maps.places.AutocompleteService();
                //var txtLoc = document.getElementById('LocSelectedName').value;
                //service.getQueryPredictions({ input: txtLoc }, displaySuggestions);

                var autoCompleService = new google.maps.places.AutocompleteService();
                var placesService = new google.maps.places.PlacesService(map);
                var infowindow = new google.maps.InfoWindow();
                var marker = new google.maps.Marker({
                    map: map,
                    anchorPoint: new google.maps.Point(0, -29)
                });

                // ASY
                var callbackSetMaps = function (predictions, status) {
                    if (status != google.maps.places.PlacesServiceStatus.OK) {
                        alert(status);
                        return;
                    }

                    predictions.forEach(function (prediction) {
                        //var li = document.createElement('li');
                        //li.appendChild(document.createTextNode(prediction.description));
                        //document.getElementById('LocSelectedName').appendChild(li);

                        getPlaceDetails(prediction.place_id);

                    });
                };

                // Get place details
                function getPlaceDetails(placeId) {
                    var request = {
                        placeId: placeId
                    };

                    placesService.getDetails(request, function (place, status) {

                        if (status === google.maps.places.PlacesServiceStatus.OK) {

                            if (!place.geometry) {
                                window.alert("Autocomplete's returned place contains no geometry");
                                window.alert("No details available for input: '" + place.name + "'");
                                return;
                            }

                            // Set lat/long
                            $('#Latitude').val(place.geometry.location.lat());
                            $('#Longitude').val(place.geometry.location.lng());

                            //window.alert("Latitude : '" + document.getElementById('Latitude').value + "'");
                            //window.alert("Longitude : '" + document.getElementById('Longitude').value + "'");

                            // If the place has a geometry, then present it on a map.
                            if (place.geometry.viewport) {
                                map.fitBounds(place.geometry.viewport);
                            } else {
                                map.setCenter(place.geometry.location);
                                map.setZoom(12);
                            }
                            marker.setIcon(({
                                url: place.icon,
                                size: new google.maps.Size(71, 71),
                                origin: new google.maps.Point(0, 0),
                                anchor: new google.maps.Point(17, 34),
                                scaledSize: new google.maps.Size(35, 35)
                            }));
                            marker.setPosition(place.geometry.location);
                            marker.setVisible(true);

                            var address = '';
                            if (place.address_components) {
                                address = [
                                    (place.address_components[0] && place.address_components[0].short_name || ''),
                                    (place.address_components[1] && place.address_components[1].short_name || ''),
                                    (place.address_components[2] && place.address_components[2].short_name || '')
                                ].join(' ');
                            }

                            infowindow.setContent('<div><strong>' + place.name + '</strong><br>' + address);
                            infowindow.open(map, marker);

                        }
                    });
                }

                //google.maps.event.addListener(autocomplete, 'place_changed', function () {
                autocomplete.addListener('place_changed', function () {
                    infowindow.close();
                    marker.setVisible(false);
                    var place = autocomplete.getPlace();

                    if (!place ) {

                        //perform request. limit results to Maurice
                        //var txtLoc = document.getElementById('LocSelectedName').value;
                        var request = {
                            input: document.getElementById('LocSelectedName').value ,
                            types: ['establishment', 'geocode'],
                            componentRestrictions: { country: 'mu' },
                        };
                        autoCompleService.getPlacePredictions(request, callbackSetMaps);
                        return;
                    }
                   // window.alert("ASY Debug ---- autocomplete.getPlace() : '" + place.name + "'");

                    if (!place.geometry) {
                        window.alert("Autocomplete's returned place contains no geometry");
                        window.alert("No details available for input: '" + place.name + "'");
                        return;
                    }

                    // Set lat/long
                    $('#Latitude').val(place.geometry.location.lat());
                    $('#Longitude').val(place.geometry.location.lng());

                    //window.alert("Latitude : '" + document.getElementById('Latitude').value + "'");
                    //window.alert("Longitude : '" + document.getElementById('Longitude').value + "'");

                    // If the place has a geometry, then present it on a map.
                    if (place.geometry.viewport) {
                        map.fitBounds(place.geometry.viewport);
                    } else {
                        map.setCenter(place.geometry.location);
                        map.setZoom(12);
                    }
                    marker.setIcon(({
                        url: place.icon,
                        size: new google.maps.Size(71, 71),
                        origin: new google.maps.Point(0, 0),
                        anchor: new google.maps.Point(17, 34),
                        scaledSize: new google.maps.Size(35, 35)
                    }));
                    marker.setPosition(place.geometry.location);
                    marker.setVisible(true);

                    var address = '';
                    if (place.address_components) {
                        address = [
                          (place.address_components[0] && place.address_components[0].short_name || ''),
                          (place.address_components[1] && place.address_components[1].short_name || ''),
                          (place.address_components[2] && place.address_components[2].short_name || '')
                        ].join(' ');
                    }

                    infowindow.setContent('<div><strong>' + place.name + '</strong><br>' + address);
                    infowindow.open(map, marker);
                });

                // ASY : force fire event
              //  autocomplete.place_changed();
               google.maps.event.trigger(autocomplete, 'place_changed');

                google.maps.event.addDomListener(input, 'keydown', function (e) {
                    if (e.keyCode == 13) {
                        if (e.preventDefault) {
                            e.preventDefault();
                        }
                        else {
                            // Since the google event handler framework does not handle
                            e.cancelBubble = true;
                            e.returnValue = false;
                        }
                    }
                });

            }

            function handleNoGeolocation(errorFlag) {
                if (errorFlag) {
                    var content = 'Error: The Geolocation service failed.';
                } else {
                    var content = 'Error: Your browser doesn\'t support geolocation.';
                }

                var options = {
                    map: map,
                    position: new google.maps.LatLng(60, 105),
                    content: content
                };

                var infowindow = new google.maps.InfoWindow(options);
                map.setCenter(options.position);
            }
        </script>*@

}

