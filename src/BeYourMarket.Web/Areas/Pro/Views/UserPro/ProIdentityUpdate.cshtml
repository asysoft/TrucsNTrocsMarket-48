@model BeYourMarket.Web.Models.ProShopModel


@section Styles {
    <link href="~/Content/bootstrap-fileinput/css/fileinput.min.css" rel="stylesheet" />
    <link href="~/Content/jsTree/themes/default/style.min.css" rel="stylesheet" />

}

<div class="container-fluid" style="background-color:#EAF4D3">
    <div class="mx-auto col-md-6">
        <div class="card">
            @*@using (Html.BeginForm("ProIdentityUpdate", "UserPro", FormMethod.Post, new { area = "Pro", role = "form", id = "formProUpd", enctype = "multipart/form-data" }))
                {*@
            <form action="@Url.Action("ProIdentityUpdate", "UserPro", new { area = "Pro" })" id="proUpdateForm" method="post" role="form" enctype="multipart/form-data">

                @Html.AntiForgeryToken()
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                <div class="card-header">
                    <label class="display-4">[[[Company Infos]]]</label>
                    @*<a class="btn btn-success btn-sm pull-right" href="@Url.Action("UserPro", "Professional")">[[[Validate]]]</a>*@
                    <button class="btn btn-primary pull-right" type="submit"><i class="fa fa-save"></i> [[[Save]]]</button>

                </div>
                <div class="card-body">
                    <div class="container">
                        <div class="col col-md-8 align-">
                            <div class="container align-content-center">

                                <div class="form-group">
                                    <div class="target  text-center">
                                        <input type="file" id="files" name="files" class="file-loading" data-preview-file-type="img">
                                        <label for="files">[[[Choose your Logo]]]</label>
                                    </div>
                                </div>

                            </div>
                        </div>
                        <hr />
                        <fieldset>
                            <div class="form-group">
                                <label class="mark">[[[Company name]]]</label>
                                @Html.TextBoxFor(m => m.UserAddInf.ProCompany, new { @class = "form-control" })
                            </div>

                            <div class="form-group">
                                <label class="mark">[[[Siret Number]]] : </label>
                                @Html.TextBoxFor(m => m.UserAddInf.ProSiret, new { @class = "form-control" })
                            </div>
                        </fieldset>
                        <fieldset>
                            <h5>[[[Categories]]]</h5>
                            <div class="form-group" style="border-style:groove;overflow-y: auto; height:240px">
                                <div id="jstreeCategUpd">  </div>
                                <input type="hidden" id="CategoryIDhiddUpd" name="CategoryIDs" value="@Model.CategoryIDs" />
                            </div>
                        </fieldset>
                        <hr />
                        <fieldset>

                            <div class="form-group">
                                <label class="mark" for="ProPhone">[[[Company Phone]]] : </label>
                                @Html.TextBoxFor(m => m.UserAddInf.ProPhone, new { @class = "form-control" })
                            </div>
                            <div class="form-group">
                                <label class="mark" for="ProEmail">[[[Company Email]]] : </label>
                                @Html.TextBoxFor(m => m.UserAddInf.ProEmail, new { @class = "form-control" })
                            </div>
                            <div class="form-group">
                                <label class="mark" for="ProSiteWeb">[[[Web Site]]]</label>
                                @Html.TextBoxFor(m => m.UserAddInf.ProSiteWeb, new { @class = "form-control" })
                            </div>
                        </fieldset>
                        <fieldset>
                            <legend>[[[Localization]]]</legend>

                            <div class="form-group">
                                <label class="mark" for="ProAdress">[[[Adress]]]</label>
                                @Html.TextBoxFor(m => m.UserAddInf.ProAdress, new { @class = "form-control" })
                            </div>
                            <div class="form-group">
                                <label class="mark" for="ProTownZip">[[[City]]]</label>
                                @Html.TextBoxFor(m => m.UserAddInf.ProTownZip, new { @class = "form-control" })
                            </div>
                            <div class="form-body" style="border-style:groove;overflow-y: auto; height: 270px;">
                                <div id="jstreeLoc"> </div>
                            </div>
                            <div class="form-group">
                                <input type="text" id="LocSelectedName" name="LocSelectedName" value="" />
                                <input type="hidden" id="LocationRefIDhidd" name="LocationRefID" value="@Model.UserAddInf.LocationRefID" />
                                <input type="hidden" id="Longitude" name="Longitude" value="@Model.UserAddInf.ProLongitude" />
                                <input type="hidden" id="Latitude" name="Latitude" value="@Model.UserAddInf.ProLatitude" />


                            </div>
                            <div id="map-canvas" style="width:100%" ></div>
                        </fieldset>
                        <hr />
                        <fieldset>
                            <legend>[[[Company Contact]]]</legend>
                            <div class="form-group text-center">
                                <label class="mark fa fa-male">
                                    [[[Male]]]
                                    <input type="radio" name="Gender" enabled="true" id="GenderUpd" value="M" @(Model.UserPro.Gender == "M" ? "checked" : "") />
                                </label>
                                <label class="mark fa fa-female">
                                    [[[Female]]]
                                    <input type="radio" name="Gender" enabled="true" id="GenderUpd" value="F" @(Model.UserPro.Gender == "F" ? "checked" : "") />
                                </label>
                            </div>

                            <div class="form-group">
                                <label class="mark" for="FirstName">[[[First Name]]] : </label>
                                @Html.TextBoxFor(m => m.UserPro.FirstName, new { @class = "form-control" })
                            </div>
                            <div class="form-group">
                                <label class="mark" for="LastName">[[[Last Name]]] : </label>
                                @Html.TextBoxFor(m => m.UserPro.LastName, new { @class = "form-control" })
                            </div>
                            <div class="form-group">
                                <label class="mark" for="PhoneNumber">[[[Phone Number]]] : </label>
                                @Html.TextBoxFor(m => m.UserPro.PhoneNumber, new { @class = "form-control" })
                            </div>
                        </fieldset>
                        <hr />
                    </div>

                </div>

                <div class="card-footer">
                </div>

            </form>

        </div>
    </div>
</div>

<!-- ./ Main Content -->
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script src="~/Scripts/fileinput.min.js"></script>
    @Html.Partial("_LocalizationFileInput")
    <script src="~/js/colorpicker/js/bootstrap-colorpicker.min.js"></script>
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCgB8z009mHSrPLaJUobfgmI1gTlk1aqyc&libraries=places&callback=initMap" async defer></script>

    <script>
        var $input = $("#files");

        $input.fileinput({
            uploadAsync: false,
            showCaption: false,
            showRemove: false,
            showUpload: false,
            maxFileCount: 1,
            overwriteInitial: true,
            maxImageWidth: 200,
            maxImageHeight: 200,
            resizeImage: true,
            resizePreference: 'width',
            initialPreview: [
                @*'<img src="@Model.Pictures.First().Url" >'*@
                '<img src="@Model.Pictures.First().Url" class="file-preview-image mt-2 ">'
            ],
            initialPreviewConfig: [
                    { url: "@Url.Action("deleteProLogo", "UserPro", new { area= "Pro"})", key: "logo" }
            ],
            maxFileSize: 10000,
            browseClass: "btn btn-default",
            allowedFileTypes: ["image"]
        });


    </script>
    <script>
        $(function () {

            var CategID;
            $('#jstreeCategUpd').jstree({
                'core': {
                    "multiple": false,
                    "check_callback": false,
                    'data': {
                        'url': '/jsTree3/GetJsTree3CategData/',
                        "data": function (node) {
                            return {
                                id  : null,
                                ids : "@Model.CategoryIDs"
                            }
                        },
                        'dataType': 'json',
                    },
                    "themes": {
                        "responsive": true,
                        "variant": 'larg',
                        "stripes": false,
                        "icons": false,
                        "ellipsis": false,
                        "dots": false
                    },
                    "checkbox": {
                        "visible": true,
                        "two_state": false
                    }
                },
                "plugins": ["checkbox"]
            });

            $('#jstreeCategUpd').on("changed.jstree", function (e, data) {
                if (data != null && data.selected != null && data.selected.length > 0) {
                    document.getElementById('CategoryIDhiddUpd').value = data.selected.join(";");
                }
                else
                    document.getElementById('CategoryIDhiddUpd').value = null;
            });

        });

    </script>
    <script>
        $(function () {
            $('#jstreeLoc').jstree({
                'core': {
                    "multiple": false,
                    "check_callback": false,
                    'data': {
                        'url': '/jsTree3/GetJsTree3LocData/',
                        "data": function (node) { return { id:  @Model.UserAddInf.LocationRefID }; },
                        'dataType': 'json',
                    },
                    "themes": {
                        "responsive": true,
                        "variant": 'larg',
                        "stripes": false,
                        "icons": false,
                        "ellipsis": false,
                        "dots": false
                    },
                    "checkbox": {
                        "visible": true,
                        "two_state": false
                    }
                },
                "plugins": [ "checkbox"]
            });

            $('#jstreeLoc').on("changed.jstree", function (e, data) {
                if (data != null && data.selected != null && data.selected.length > 0) {
                    document.getElementById('LocationRefIDhidd').value = data.selected[0];

                    // Recupere le ou les texte selectionne
                    var i, j, r = [];
                    for (i = 0, j = data.selected.length; i < j; i++) {
                        r.push(data.instance.get_node(data.selected[i]).text);
                    }
                    @*var sel = "@Model.UserAddInf.ProAdress , " + r.join(' ') + ', ile Maurice';*@
                    var sel = r.join(' ')  + ', ile Maurice';
                    document.getElementById('LocSelectedName').value = sel;

                    initMap();

                }
            });

        });
    </script>

    <script>
        //https://developers.google.com/maps/documentation/javascript/examples/places-autocomplete
        //https://developers.google.com/maps/documentation/javascript/examples/geocoding-reverse
        function initMap() {
            var isDraggable = $(document).width() > 480 ? true : false; // If document (your website) is wider than 480px, isDraggable = true, else isDraggable = false

            var mapOptions = {
                draggable: isDraggable,
                scrollwheel: false, // Prevent users to start zooming the map when scrolling down the page
                zoom: 13,
                center: new google.maps.LatLng(-20.1608912, 57.50122220000003),
            };

            @{ var hasLatLng = @Model.UserAddInf.ProLatitude.HasValue && @Model.UserAddInf.ProLongitude.HasValue; }
            var hasLatLng = @hasLatLng.ToString().ToLowerInvariant();

            @if (hasLatLng){
                <text>
            mapOptions = {
                center: new google.maps.LatLng(@Model.UserAddInf.ProLatitude.Value.ToString(System.Globalization.CultureInfo.InvariantCulture), @Model.UserAddInf.ProLongitude.Value.ToString(System.Globalization.CultureInfo.InvariantCulture)),
                zoom: 12
            };
            </text>
            };

            var map = new google.maps.Map(document.getElementById('map-canvas'),  mapOptions);

            @if (hasLatLng){
                <text>
            var marker = new google.maps.Marker({
                position: new google.maps.LatLng(@Model.UserAddInf.ProLatitude.Value.ToString(System.Globalization.CultureInfo.InvariantCulture), @Model.UserAddInf.ProLongitude.Value.ToString(System.Globalization.CultureInfo.InvariantCulture)),
                map: map
            });

            marker.setVisible(true);
            </text>
            }

            geocoder = new google.maps.Geocoder();

            var input = (document.getElementById('LocSelectedName'));

            // Try HTML5 geolocation
            @*if (@Model.ListingItem.ID == 0){
                if (navigator.geolocation) {
                    navigator.geolocation.getCurrentPosition(function (position) {
                        var pos = new google.maps.LatLng(position.coords.latitude,
                                                         position.coords.longitude);

                        geocoder.geocode({ 'latLng': pos }, function (results, status) {
                            if (status == google.maps.GeocoderStatus.OK) {
                                if (results[1]) {
                                    map.setZoom(14);
                                    map.setCenter(pos);

                                    marker = new google.maps.Marker({
                                        position: pos,
                                        map: map,
                                        content: results[1].formatted_address
                                    });
                                    infowindow.setContent(results[1].formatted_address);
                                    infowindow.open(map, marker);

                                    $('#LocSelectedName').val(results[1].formatted_address);

                                    alert(results[1].formatted_address);

                                    $('#Latitude').val(pos.lat());
                                    $('#Longitude').val(pos.lng());

                                } else {
                                    alert('No results found');
                                }
                            } else {
                                alert('Geocoder failed due to: ' + status);
                            }
                        });
                    }, function () {
                        handleNoGeolocation(true);
                    });
                } else {
                    // Browser doesn't support Geolocation
                    handleNoGeolocation(false);
                }
            }*@

            var options = {
                types: ['(cities)'],
                componentRestrictions: { country: 'mu' }
            };
            var autocomplete = new google.maps.places.Autocomplete(input);
            autocomplete.bindTo('bounds', map);

            // ASY : Set the data fields to return when the user selects a place.
            autocomplete.setFields(  ['address_components', 'geometry', 'icon', 'name']);

            // ASY : try
            //var service = new google.maps.places.AutocompleteService();
            //var txtLoc = document.getElementById('LocSelectedName').value;
            //service.getQueryPredictions({ input: txtLoc }, displaySuggestions);

            var autoCompleService = new google.maps.places.AutocompleteService();
            var placesService = new google.maps.places.PlacesService(map);
            var infowindow = new google.maps.InfoWindow();
            var marker = new google.maps.Marker({
                map: map,
                anchorPoint: new google.maps.Point(0, -29)
            });

            // ASY
            var callbackSetMaps = function (predictions, status) {
                if (status != google.maps.places.PlacesServiceStatus.OK) {
                    alert(status);
                    return;
                }

                predictions.forEach(function (prediction) {
                    //var li = document.createElement('li');
                    //li.appendChild(document.createTextNode(prediction.description));
                    //document.getElementById('LocSelectedName').appendChild(li);

                    getPlaceDetails(prediction.place_id);

                });
            };

            // Get place details
            function getPlaceDetails(placeId) {
                var request = {
                    placeId: placeId
                };

                placesService.getDetails(request, function (place, status) {

                    if (status === google.maps.places.PlacesServiceStatus.OK) {

                        if (!place.geometry) {
                            window.alert("Autocomplete's returned place contains no geometry");
                            window.alert("No details available for input: '" + place.name + "'");
                            return;
                        }

                        // Set lat/long
                        $('#Latitude').val(place.geometry.location.lat());
                        $('#Longitude').val(place.geometry.location.lng());

                        //window.alert("Latitude : '" + document.getElementById('Latitude').value + "'");
                        //window.alert("Longitude : '" + document.getElementById('Longitude').value + "'");

                        // If the place has a geometry, then present it on a map.
                        if (place.geometry.viewport) {
                            map.fitBounds(place.geometry.viewport);
                        } else {
                            map.setCenter(place.geometry.location);
                            map.setZoom(12);
                        }
                        marker.setIcon(({
                            url: place.icon,
                            size: new google.maps.Size(71, 71),
                            origin: new google.maps.Point(0, 0),
                            anchor: new google.maps.Point(17, 34),
                            scaledSize: new google.maps.Size(35, 35)
                        }));
                        marker.setPosition(place.geometry.location);
                        marker.setVisible(true);

                        var address = '';
                        if (place.address_components) {
                            address = [
                                (place.address_components[0] && place.address_components[0].short_name || ''),
                                (place.address_components[1] && place.address_components[1].short_name || ''),
                                (place.address_components[2] && place.address_components[2].short_name || '')
                            ].join(' ');
                        }

                        infowindow.setContent('<div><strong>' + place.name + '</strong><br>' + address);
                        infowindow.open(map, marker);

                    }
                });
            }

            //google.maps.event.addListener(autocomplete, 'place_changed', function () {
            autocomplete.addListener('place_changed', function () {
                infowindow.close();
                marker.setVisible(false);
                var place = autocomplete.getPlace();

                if (!place ) {

                    //perform request. limit results to Maurice
                    //var txtLoc = document.getElementById('LocSelectedName').value;
                    var request = {
                        input: document.getElementById('LocSelectedName').value ,
                        types: ['establishment', 'geocode'],
                        componentRestrictions: { country: 'mu' },
                    };
                    autoCompleService.getPlacePredictions(request, callbackSetMaps);
                    return;
                }
               // window.alert("ASY Debug ---- autocomplete.getPlace() : '" + place.name + "'");

                if (!place.geometry) {
                    window.alert("Autocomplete's returned place contains no geometry");
                    window.alert("No details available for input: '" + place.name + "'");
                    return;
                }

                // Set lat/long
                $('#Latitude').val(place.geometry.location.lat());
                $('#Longitude').val(place.geometry.location.lng());

                //window.alert("Latitude : '" + document.getElementById('Latitude').value + "'");
                //window.alert("Longitude : '" + document.getElementById('Longitude').value + "'");

                // If the place has a geometry, then present it on a map.
                if (place.geometry.viewport) {
                    map.fitBounds(place.geometry.viewport);
                } else {
                    map.setCenter(place.geometry.location);
                    map.setZoom(12);
                }
                marker.setIcon(({
                    url: place.icon,
                    size: new google.maps.Size(71, 71),
                    origin: new google.maps.Point(0, 0),
                    anchor: new google.maps.Point(17, 34),
                    scaledSize: new google.maps.Size(35, 35)
                }));
                marker.setPosition(place.geometry.location);
                marker.setVisible(true);

                var address = '';
                if (place.address_components) {
                    address = [
                      (place.address_components[0] && place.address_components[0].short_name || ''),
                      (place.address_components[1] && place.address_components[1].short_name || ''),
                      (place.address_components[2] && place.address_components[2].short_name || '')
                    ].join(' ');
                }

                infowindow.setContent('<div><strong>' + place.name + '</strong><br>' + address);
                infowindow.open(map, marker);
            });

            // ASY : force fire event
          //  autocomplete.place_changed();
           google.maps.event.trigger(autocomplete, 'place_changed');

            google.maps.event.addDomListener(input, 'keydown', function (e) {
                if (e.keyCode == 13) {
                    if (e.preventDefault) {
                        e.preventDefault();
                    }
                    else {
                        // Since the google event handler framework does not handle
                        e.cancelBubble = true;
                        e.returnValue = false;
                    }
                }
            });

        }

        function handleNoGeolocation(errorFlag) {
            if (errorFlag) {
                var content = 'Error: The Geolocation service failed.';
            } else {
                var content = 'Error: Your browser doesn\'t support geolocation.';
            }

            var options = {
                map: map,
                position: new google.maps.LatLng(60, 105),
                content: content
            };

            var infowindow = new google.maps.InfoWindow(options);
            map.setCenter(options.position);
        }
    </script>

}
}
